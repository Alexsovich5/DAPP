"""Add Phase 6 personalization and content intelligence models

Revision ID: c56ed7f4ab95
Revises: dbaac808d228
Create Date: 2025-08-10 09:18:28.503700

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c56ed7f4ab95'
down_revision = 'dbaac808d228'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_conversation_flow_analytics_id'), table_name='conversation_flow_analytics')
    op.drop_table('conversation_flow_analytics')
    op.drop_index(op.f('ix_user_profiles_id'), table_name='user_profiles')
    op.drop_table('user_profiles')
    op.drop_index(op.f('ix_personalized_content_id'), table_name='personalized_content')
    op.drop_table('personalized_content')
    op.drop_index(op.f('ix_ml_models_id'), table_name='ml_models')
    op.drop_table('ml_models')
    op.drop_index(op.f('ix_photo_moderation_logs_id'), table_name='photo_moderation_logs')
    op.drop_table('photo_moderation_logs')
    op.drop_index(op.f('ix_user_photos_id'), table_name='user_photos')
    op.drop_index(op.f('ix_user_photos_photo_uuid'), table_name='user_photos')
    op.drop_table('user_photos')
    op.drop_index(op.f('ix_photo_reveal_requests_id'), table_name='photo_reveal_requests')
    op.drop_table('photo_reveal_requests')
    op.drop_index(op.f('ix_compatibility_predictions_id'), table_name='compatibility_predictions')
    op.drop_table('compatibility_predictions')
    op.drop_index(op.f('ix_algorithm_optimizations_id'), table_name='algorithm_optimizations')
    op.drop_table('algorithm_optimizations')
    op.drop_index(op.f('ix_personalized_recommendations_id'), table_name='personalized_recommendations')
    op.drop_table('personalized_recommendations')
    op.drop_index(op.f('ix_model_predictions_id'), table_name='model_predictions')
    op.drop_table('model_predictions')
    op.drop_index(op.f('ix_photo_reveal_permissions_id'), table_name='photo_reveal_permissions')
    op.drop_table('photo_reveal_permissions')
    op.drop_index(op.f('ix_user_personalization_profiles_id'), table_name='user_personalization_profiles')
    op.drop_table('user_personalization_profiles')
    op.drop_index(op.f('ix_content_feedback_id'), table_name='content_feedback')
    op.drop_table('content_feedback')
    op.drop_index(op.f('ix_photo_reveal_timelines_id'), table_name='photo_reveal_timelines')
    op.drop_table('photo_reveal_timelines')
    op.drop_index(op.f('ix_photo_reveal_events_id'), table_name='photo_reveal_events')
    op.drop_table('photo_reveal_events')
    op.drop_index(op.f('ix_behavioral_patterns_id'), table_name='behavioral_patterns')
    op.drop_table('behavioral_patterns')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('behavioral_patterns',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pattern_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('pattern_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('frequency', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('strength', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last_observed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('trend_direction', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('prediction_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('behavioral_patterns_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('behavioral_patterns_pkey'))
    )
    op.create_index(op.f('ix_behavioral_patterns_id'), 'behavioral_patterns', ['id'], unique=False)
    op.create_table('photo_reveal_events',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timeline_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('connection_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('event_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('revelation_day', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('emotional_state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('connection_energy_level', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('days_since_connection', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('revelations_completed_at_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('event_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('system_generated', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['connection_id'], ['soul_connections.id'], name=op.f('photo_reveal_events_connection_id_fkey')),
    sa.ForeignKeyConstraint(['timeline_id'], ['photo_reveal_timelines.id'], name=op.f('photo_reveal_events_timeline_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('photo_reveal_events_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('photo_reveal_events_pkey'))
    )
    op.create_index(op.f('ix_photo_reveal_events_id'), 'photo_reveal_events', ['id'], unique=False)
    op.create_table('photo_reveal_timelines',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('photo_reveal_timelines_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('connection_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('revelation_cycle_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('auto_reveal_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('early_reveal_allowed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('connection_started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('revelation_cycle_completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('photo_reveal_eligible_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('current_stage', postgresql.ENUM('HIDDEN', 'CONSENT_REQUESTED', 'MUTUAL_CONSENT', 'REVEALED', 'DECLINED', name='photorevealstage'), autoincrement=False, nullable=True),
    sa.Column('days_until_reveal', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('revelations_completed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('min_revelations_required', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user1_consent_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user2_consent_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('mutual_consent_achieved', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('consent_achieved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('photos_revealed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('photo_reveal_completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('reveal_method', postgresql.ENUM('TIMELINE_BASED', 'MANUAL_REQUEST', 'MUTUAL_AGREEMENT', name='photoconsenttype'), autoincrement=False, nullable=True),
    sa.Column('allow_partial_reveal', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('gradual_reveal_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['connection_id'], ['soul_connections.id'], name='photo_reveal_timelines_connection_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='photo_reveal_timelines_pkey'),
    sa.UniqueConstraint('connection_id', name='photo_reveal_timelines_connection_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_photo_reveal_timelines_id'), 'photo_reveal_timelines', ['id'], unique=False)
    op.create_table('content_feedback',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_profile_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('feedback_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('feedback_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('feedback_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('interaction_duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('follow_up_actions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('context_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('feedback_given_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('device_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['content_id'], ['personalized_content.id'], name=op.f('content_feedback_content_id_fkey')),
    sa.ForeignKeyConstraint(['user_profile_id'], ['user_personalization_profiles.id'], name=op.f('content_feedback_user_profile_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('content_feedback_pkey'))
    )
    op.create_index(op.f('ix_content_feedback_id'), 'content_feedback', ['id'], unique=False)
    op.create_table('user_personalization_profiles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_personalization_profiles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('preferred_communication_style', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('conversation_pace_preference', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('revelation_timing_preference', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('content_depth_preference', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('communication_patterns', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('engagement_patterns', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('emotional_expression_patterns', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('topic_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('content_engagement_scores', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('personalization_effectiveness', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('adaptation_learning_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('preferred_ui_complexity', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('animation_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('color_theme_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('accessibility_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('successful_content_patterns', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('failed_content_patterns', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('optimization_iterations', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_optimization_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_personalization_profiles_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_personalization_profiles_pkey'),
    sa.UniqueConstraint('user_id', name='user_personalization_profiles_user_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_user_personalization_profiles_id'), 'user_personalization_profiles', ['id'], unique=False)
    op.create_table('photo_reveal_permissions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('photo_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('connection_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('viewer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('photo_owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('privacy_level', postgresql.ENUM('COMPLETELY_HIDDEN', 'SILHOUETTE', 'HEAVILY_BLURRED', 'LIGHTLY_BLURRED', 'FULLY_REVEALED', name='photoprivacylevel'), autoincrement=False, nullable=False),
    sa.Column('granted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('revoked_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('total_views', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_viewed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('total_view_time_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('granted_through_request_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('grant_method', postgresql.ENUM('TIMELINE_BASED', 'MANUAL_REQUEST', 'MUTUAL_AGREEMENT', name='photoconsenttype'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['connection_id'], ['soul_connections.id'], name=op.f('photo_reveal_permissions_connection_id_fkey')),
    sa.ForeignKeyConstraint(['granted_through_request_id'], ['photo_reveal_requests.id'], name=op.f('photo_reveal_permissions_granted_through_request_id_fkey')),
    sa.ForeignKeyConstraint(['photo_id'], ['user_photos.id'], name=op.f('photo_reveal_permissions_photo_id_fkey')),
    sa.ForeignKeyConstraint(['photo_owner_id'], ['users.id'], name=op.f('photo_reveal_permissions_photo_owner_id_fkey')),
    sa.ForeignKeyConstraint(['viewer_id'], ['users.id'], name=op.f('photo_reveal_permissions_viewer_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('photo_reveal_permissions_pkey'))
    )
    op.create_index(op.f('ix_photo_reveal_permissions_id'), 'photo_reveal_permissions', ['id'], unique=False)
    op.create_table('model_predictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('model_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('input_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('prediction_output', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('prediction_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['ml_models.id'], name=op.f('model_predictions_model_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('model_predictions_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('model_predictions_pkey'))
    )
    op.create_index(op.f('ix_model_predictions_id'), 'model_predictions', ['id'], unique=False)
    op.create_table('personalized_recommendations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recommended_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recommendation_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('recommendation_reasons', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('predicted_success_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('recommendation_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('was_acted_upon', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('user_feedback_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('actual_compatibility', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['recommended_user_id'], ['users.id'], name=op.f('personalized_recommendations_recommended_user_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('personalized_recommendations_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('personalized_recommendations_pkey'))
    )
    op.create_index(op.f('ix_personalized_recommendations_id'), 'personalized_recommendations', ['id'], unique=False)
    op.create_table('algorithm_optimizations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('optimization_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('algorithm_version', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('optimization_strategy', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('target_metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('constraints', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('baseline_metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('current_metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('improvement_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('test_population_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('control_group_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('statistical_significance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_deployed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('deployment_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deployed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('retired_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('algorithm_optimizations_pkey'))
    )
    op.create_index(op.f('ix_algorithm_optimizations_id'), 'algorithm_optimizations', ['id'], unique=False)
    op.create_table('compatibility_predictions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user1_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user2_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('compatibility_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('confidence_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('compatibility_breakdown', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('prediction_reasoning', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('prediction_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('actual_outcome', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('accuracy_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user1_id'], ['users.id'], name=op.f('compatibility_predictions_user1_id_fkey')),
    sa.ForeignKeyConstraint(['user2_id'], ['users.id'], name=op.f('compatibility_predictions_user2_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('compatibility_predictions_pkey'))
    )
    op.create_index(op.f('ix_compatibility_predictions_id'), 'compatibility_predictions', ['id'], unique=False)
    op.create_table('photo_reveal_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timeline_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('photo_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('requester_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('photo_owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('request_type', postgresql.ENUM('TIMELINE_BASED', 'MANUAL_REQUEST', 'MUTUAL_AGREEMENT', name='photoconsenttype'), autoincrement=False, nullable=False),
    sa.Column('request_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('emotional_context', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('requested_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('responded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('response_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('decline_reason', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('requested_privacy_level', postgresql.ENUM('COMPLETELY_HIDDEN', 'SILHOUETTE', 'HEAVILY_BLURRED', 'LIGHTLY_BLURRED', 'FULLY_REVEALED', name='photoprivacylevel'), autoincrement=False, nullable=True),
    sa.Column('granted_privacy_level', postgresql.ENUM('COMPLETELY_HIDDEN', 'SILHOUETTE', 'HEAVILY_BLURRED', 'LIGHTLY_BLURRED', 'FULLY_REVEALED', name='photoprivacylevel'), autoincrement=False, nullable=True),
    sa.Column('photo_viewed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('first_viewed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('total_views', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('view_duration_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['photo_id'], ['user_photos.id'], name=op.f('photo_reveal_requests_photo_id_fkey')),
    sa.ForeignKeyConstraint(['photo_owner_id'], ['users.id'], name=op.f('photo_reveal_requests_photo_owner_id_fkey')),
    sa.ForeignKeyConstraint(['requester_id'], ['users.id'], name=op.f('photo_reveal_requests_requester_id_fkey')),
    sa.ForeignKeyConstraint(['timeline_id'], ['photo_reveal_timelines.id'], name=op.f('photo_reveal_requests_timeline_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('photo_reveal_requests_pkey'))
    )
    op.create_index(op.f('ix_photo_reveal_requests_id'), 'photo_reveal_requests', ['id'], unique=False)
    op.create_table('user_photos',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_photos_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('photo_uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('original_filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('mime_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('upload_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_profile_primary', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('privacy_level', postgresql.ENUM('COMPLETELY_HIDDEN', 'SILHOUETTE', 'HEAVILY_BLURRED', 'LIGHTLY_BLURRED', 'FULLY_REVEALED', name='photoprivacylevel'), autoincrement=False, nullable=True),
    sa.Column('encryption_key_hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('blur_versions_generated', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('silhouette_generated', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('processing_complete', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('moderation_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('moderation_flags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('manual_review_required', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('total_reveals', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_revealed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_photos_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_photos_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_user_photos_photo_uuid'), 'user_photos', ['photo_uuid'], unique=True)
    op.create_index(op.f('ix_user_photos_id'), 'user_photos', ['id'], unique=False)
    op.create_table('photo_moderation_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('photo_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('moderation_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('moderator_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('moderator_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('confidence_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('flags_detected', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('violation_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('severity_level', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('action_taken', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('moderation_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('appeal_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('appeal_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ai_model_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['moderator_id'], ['users.id'], name=op.f('photo_moderation_logs_moderator_id_fkey')),
    sa.ForeignKeyConstraint(['photo_id'], ['user_photos.id'], name=op.f('photo_moderation_logs_photo_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('photo_moderation_logs_pkey'))
    )
    op.create_index(op.f('ix_photo_moderation_logs_id'), 'photo_moderation_logs', ['id'], unique=False)
    op.create_table('ml_models',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('model_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('performance_metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('training_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ml_models_pkey'))
    )
    op.create_index(op.f('ix_ml_models_id'), 'ml_models', ['id'], unique=False)
    op.create_table('personalized_content',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_profile_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('target_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('content_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('generation_strategy', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('generation_context', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ai_confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('presentation_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('engagement_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('success_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('feedback_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('a_b_test_variant', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('optimization_version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_baseline', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('first_used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['target_user_id'], ['users.id'], name=op.f('personalized_content_target_user_id_fkey')),
    sa.ForeignKeyConstraint(['user_profile_id'], ['user_personalization_profiles.id'], name=op.f('personalized_content_user_profile_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('personalized_content_pkey'))
    )
    op.create_index(op.f('ix_personalized_content_id'), 'personalized_content', ['id'], unique=False)
    op.create_table('user_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('personality_vector', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('interests_vector', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('values_vector', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('communication_vector', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('openness_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('conscientiousness_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('extraversion_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('agreeableness_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('neuroticism_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ai_confidence_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('profile_completeness_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last_updated_by_ai', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_profiles_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_profiles_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('user_profiles_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_user_profiles_id'), 'user_profiles', ['id'], unique=False)
    op.create_table('conversation_flow_analytics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('connection_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('conversation_stage', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('message_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('average_response_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sentiment_trend', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('successful_starters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('failed_starters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('optimal_timing_patterns', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('engagement_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('depth_progression', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('emotional_connection_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('analysis_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('conversation_start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('conversation_end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['connection_id'], ['soul_connections.id'], name=op.f('conversation_flow_analytics_connection_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('conversation_flow_analytics_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('conversation_flow_analytics_pkey'))
    )
    op.create_index(op.f('ix_conversation_flow_analytics_id'), 'conversation_flow_analytics', ['id'], unique=False)
    # ### end Alembic commands ###

