# Alertmanager Configuration for Dinner First SRE Team
# Intelligent alert routing and notification management

global:
  # SMTP configuration for email alerts
  smtp_smarthost: 'localhost:587'
  smtp_from: 'alerts@dinnerfirst.app'
  smtp_auth_username: 'alerts@dinnerfirst.app'
  smtp_auth_password: '${SMTP_PASSWORD}'

# Template files for custom alert formatting
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# Main routing tree
route:
  # Default settings
  group_by: ['alertname', 'cluster', 'service']
  group_wait: 10s
  group_interval: 10s
  repeat_interval: 1h
  receiver: 'sre-team'

  # Specific routing rules
  routes:
    # Critical system alerts - immediate notification
    - match:
        severity: critical
      receiver: 'critical-alerts'
      group_wait: 0s
      repeat_interval: 5m
      continue: true

    # Database issues - specialized handling
    - match:
        service: postgresql
      receiver: 'database-team'
      group_interval: 5m
      repeat_interval: 30m

    # Dating platform specific alerts
    - match:
        feature_area: soul_connections
      receiver: 'product-team'
      group_interval: 15m
      repeat_interval: 2h

    # High error rates - escalation
    - match_re:
        alertname: '.*ErrorRate.*'
      receiver: 'error-escalation'
      group_interval: 5m
      repeat_interval: 15m

    # Performance degradation
    - match_re:
        alertname: '.*ResponseTime.*|.*Latency.*'
      receiver: 'performance-team'
      group_interval: 10m
      repeat_interval: 1h

    # Security alerts
    - match:
        category: security
      receiver: 'security-team'
      group_wait: 0s
      repeat_interval: 10m

    # Business KPI alerts
    - match:
        type: business_kpi
      receiver: 'business-stakeholders'
      group_interval: 30m
      repeat_interval: 4h

# Alert receivers and notification channels
receivers:
  # Default SRE team notifications
  - name: 'sre-team'
    email_configs:
      - to: 'sre-team@dinnerfirst.app'
        subject: '[Dinner First] {{ .GroupLabels.alertname }} Alert'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Service: {{ .Labels.service }}
          Severity: {{ .Labels.severity }}
          Time: {{ .StartsAt }}
          {{ end }}
    
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#sre-alerts'
        title: 'Dinner First Alert: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }}
          *Service:* {{ .Labels.service }}
          *Severity:* {{ .Labels.severity }}
          *Time:* {{ .StartsAt }}
          {{ end }}

  # Critical alerts - multiple channels
  - name: 'critical-alerts'
    email_configs:
      - to: 'sre-oncall@dinnerfirst.app'
        subject: 'ðŸš¨ CRITICAL ALERT - {{ .GroupLabels.alertname }}'
        body: |
          CRITICAL SYSTEM ALERT
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Service: {{ .Labels.service }}
          Instance: {{ .Labels.instance }}
          Time: {{ .StartsAt }}
          
          Runbook: {{ .Annotations.runbook_url }}
          Dashboard: {{ .Annotations.dashboard_url }}
          {{ end }}
    
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_CRITICAL}'
        channel: '#critical-alerts'
        title: 'ðŸš¨ CRITICAL: {{ .GroupLabels.alertname }}'
        color: 'danger'
        text: |
          {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }}
          *Service:* {{ .Labels.service }}
          *Instance:* {{ .Labels.instance }}
          *Severity:* {{ .Labels.severity }}
          *Runbook:* {{ .Annotations.runbook_url }}
          {{ end }}
    
    # PagerDuty integration for critical alerts
    pagerduty_configs:
      - integration_key: '${PAGERDUTY_INTEGRATION_KEY}'
        description: 'Critical alert: {{ .GroupLabels.alertname }}'
        severity: 'critical'

  # Database team notifications
  - name: 'database-team'
    email_configs:
      - to: 'database-team@dinnerfirst.app'
        subject: '[DB] {{ .GroupLabels.alertname }} - {{ .GroupLabels.service }}'
        body: |
          Database Alert for Dinner First
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Database: {{ .Labels.database }}
          Query: {{ .Annotations.query }}
          Time: {{ .StartsAt }}
          {{ end }}

  # Product team for dating platform features
  - name: 'product-team'
    email_configs:
      - to: 'product-team@dinnerfirst.app'
        subject: '[Product] {{ .GroupLabels.alertname }} - Soul Connections'
        body: |
          Dating Platform Feature Alert
          
          {{ range .Alerts }}
          Feature Area: {{ .Labels.feature_area }}
          Alert: {{ .Annotations.summary }}
          User Impact: {{ .Annotations.user_impact }}
          Time: {{ .StartsAt }}
          {{ end }}
    
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_PRODUCT}'
        channel: '#product-alerts'
        title: 'Soul Connections Alert: {{ .GroupLabels.alertname }}'

  # Error escalation for high error rates
  - name: 'error-escalation'
    email_configs:
      - to: 'sre-team@dinnerfirst.app,engineering-leads@dinnerfirst.app'
        subject: '[ERROR ESCALATION] {{ .GroupLabels.alertname }}'
        body: |
          High Error Rate Detected
          
          {{ range .Alerts }}
          Service: {{ .Labels.service }}
          Error Rate: {{ .Labels.error_rate }}%
          Endpoint: {{ .Labels.endpoint }}
          Time: {{ .StartsAt }}
          
          Action Required: Immediate investigation needed
          {{ end }}

  # Performance team notifications
  - name: 'performance-team'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_PERFORMANCE}'
        channel: '#performance'
        title: 'Performance Alert: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          *Service:* {{ .Labels.service }}
          *Metric:* {{ .Annotations.summary }}
          *Current Value:* {{ .Labels.current_value }}
          *Threshold:* {{ .Labels.threshold }}
          {{ end }}

  # Security team for security alerts
  - name: 'security-team'
    email_configs:
      - to: 'security-team@dinnerfirst.app'
        subject: 'ðŸ”’ SECURITY ALERT - {{ .GroupLabels.alertname }}'
        body: |
          Security Alert for Dinner First
          
          {{ range .Alerts }}
          Type: {{ .Labels.security_type }}
          Alert: {{ .Annotations.summary }}
          Source IP: {{ .Labels.source_ip }}
          User: {{ .Labels.user_id }}
          Time: {{ .StartsAt }}
          
          Immediate Action Required
          {{ end }}

  # Business stakeholders for KPI alerts
  - name: 'business-stakeholders'
    email_configs:
      - to: 'business-team@dinnerfirst.app'
        subject: '[KPI Alert] {{ .GroupLabels.alertname }}'
        body: |
          Business KPI Alert
          
          {{ range .Alerts }}
          Metric: {{ .Labels.metric_name }}
          Current Value: {{ .Labels.current_value }}
          Target: {{ .Labels.target_value }}
          Trend: {{ .Annotations.trend }}
          Impact: {{ .Annotations.business_impact }}
          {{ end }}

# Inhibition rules - suppress lower priority alerts when higher priority ones are firing
inhibit_rules:
  # If service is down, don't alert on high latency
  - source_match:
      alertname: 'ServiceDown'
    target_match:
      alertname: 'HighLatency'
    equal: ['service']

  # If database is down, don't alert on connection issues
  - source_match:
      alertname: 'DatabaseDown'
    target_match_re:
      alertname: '.*Connection.*'
    equal: ['instance']

  # If critical alert is firing, suppress warning alerts
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['service', 'instance']